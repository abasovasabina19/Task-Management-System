CREATE OR REPLACE PACKAGE user_management_pkg AS
  -- Kullanıcı Ekleme (Insert)
  PROCEDURE add_user(
    p_username users.username%TYPE,
    p_email users.email%TYPE,
    p_password users.password%TYPE,
    p_role_name roles.role_name%TYPE
  );

  -- Kullanıcı Güncelleme (Update)
  PROCEDURE update_user(
    p_user_id users.user_id%TYPE,
    p_username users.username%TYPE,
    p_email users.email%TYPE,
    p_password users.password%TYPE,
    p_role_name roles.role_name%TYPE
  );

  -- Kullanıcı Silme (Delete)
  PROCEDURE delete_user(p_user_id users.user_id%TYPE);

  -- Log Ekleme
  PROCEDURE add_log(
    p_user_id logs.user_id%TYPE,
    p_task_id logs.task_id%TYPE := NULL, -- Task ID'yi opsiyonel hale getirin
    p_event_type logs.event_type%TYPE,
    p_description logs.description%TYPE
  );

END user_management_pkg;
/


-- Body
CREATE OR REPLACE PACKAGE BODY user_management_pkg AS
  -- Kullanıcı Ekleme (Insert)
  PROCEDURE add_user(
    p_username users.username%TYPE,
    p_email users.email%TYPE,
    p_password users.password%TYPE,
    p_role_name roles.role_name%TYPE
  ) AS
    v_role_id roles.role_id%TYPE;
  BEGIN
    -- Verilen rol adına göre rol kimliğini bul
    SELECT role_id INTO v_role_id FROM roles WHERE role_name = p_role_name;
    
    -- Kullanıcı eklemesi
    INSERT INTO users (user_id, username, email, password, role_id)
    VALUES (user_id_seq.NEXTVAL, p_username, p_email, p_password, v_role_id);
    
    COMMIT;
    
    -- Loglama
    add_log(NULL, NULL, 'USER_INSERT', 'User inserted: ' || p_username);
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      RAISE;
  END add_user;

  -- Kullanıcı Güncelleme (Update)
  PROCEDURE update_user(
    p_user_id users.user_id%TYPE,
    p_username users.username%TYPE,
    p_email users.email%TYPE,
    p_password users.password%TYPE,
    p_role_name roles.role_name%TYPE
  ) AS
    v_role_id roles.role_id%TYPE;
  BEGIN
    -- Verilen rol adına göre rol kimliğini bul
    SELECT role_id INTO v_role_id FROM roles WHERE role_name = p_role_name;
    
    -- Kullanıcı güncellemesi
    UPDATE users
    SET
      username = p_username,
      email = p_email,
      password = p_password,
      role_id = v_role_id
    WHERE user_id = p_user_id;
    
    COMMIT;
    
    -- Loglama
    add_log(NULL, NULL, 'USER_UPDATE', 'User updated: ' || p_username);
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      RAISE;
  END update_user;

  -- Kullanıcı Silme (Delete)
  PROCEDURE delete_user(p_user_id users.user_id%TYPE) AS
  BEGIN
    DELETE FROM users WHERE user_id = p_user_id;
    COMMIT;
    -- Loglama
    add_log(NULL, NULL, 'USER_DELETE', 'User deleted: ' || TO_CHAR(p_user_id));
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      RAISE;
  END delete_user;

  -- Log Ekleme
  PROCEDURE add_log(
    p_user_id logs.user_id%TYPE,
    p_task_id logs.task_id%TYPE := NULL, -- Task ID'yi opsiyonel hale getirin
    p_event_type logs.event_type%TYPE,
    p_description logs.description%TYPE
  ) AS
  BEGIN
    INSERT INTO logs (log_id, user_id, task_id, event_type, description)
    VALUES (log_id_seq.NEXTVAL, p_user_id, p_task_id, p_event_type, p_description);
    
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      RAISE;
  END add_log;  
END user_management_pkg;
/



EXEC user_management_pkg.add_user('Sabina', 'Sabina@div.edu.az', 'parola123', 'Admin');
EXEC user_management_pkg.update_user(16, 'Leman', 'Leman@div.edu.az', 'newparola12', 'Manager');
EXEC user_management_pkg.delete_user(1);
EXEC user_management_pkg.add_log(1, NULL, 'USER_INSERT', 'Yeni user eklendi: Leman'); -- xeta verir tasks tablem bosdu
