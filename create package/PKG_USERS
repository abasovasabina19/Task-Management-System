CREATE OR REPLACE PACKAGE pkg_users AS
  -- Procedure to insert a user
  PROCEDURE insert_user (
    p_username VARCHAR2,
    p_role VARCHAR2,
    p_email VARCHAR2,
    p_password VARCHAR2
  );
  -- Procedure to delete a user
  PROCEDURE delete_user (
    p_user_id NUMBER
  );
  -- Procedure to update a user
  PROCEDURE update_user (
    p_user_id NUMBER,
    p_username VARCHAR2,
    p_role VARCHAR2,
    p_email VARCHAR2,
    p_password VARCHAR2
  );
END ;
/

CREATE OR REPLACE PACKAGE BODY pkg_users AS
  -- Alt prosedur
  PROCEDURE perform_operation (
    p_sql_statement VARCHAR2
  ) AS
  BEGIN
    BEGIN
      EXECUTE IMMEDIATE p_sql_statement;
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        RAISE_APPLICATION_ERROR(-20001, 'Operation error: ' || SQLERRM);
    END;
  END perform_operation;

-- user elave etmek ucun prosedur
  PROCEDURE insert_user (
    p_username VARCHAR2,
    p_role VARCHAR2,
    p_email VARCHAR2,
    p_password VARCHAR2
  ) AS
  BEGIN
  
    INSERT INTO users (user_id, username, role, email, password)
    VALUES (user_id_seq.NEXTVAL, p_username, p_role, p_email, p_password);
    
    perform_operation('COMMIT');
  END insert_user;

  -- user silmek ucun prosedur
  PROCEDURE delete_user (
    p_user_id NUMBER
  ) AS
  BEGIN
    
    DELETE FROM users WHERE user_id = p_user_id;

    perform_operation('COMMIT');
  END delete_user;

  -- user update elemek ucun prosedur
  PROCEDURE update_user (
    p_user_id NUMBER,
    p_username VARCHAR2,
    p_role VARCHAR2,
    p_email VARCHAR2,
    p_password VARCHAR2
  ) AS
  BEGIN
  
    UPDATE users
    SET username = p_username,
        role = p_role,
        email = p_email,
        password = p_password
    WHERE user_id = p_user_id;

    perform_operation('COMMIT');
  END update_user;

END pkg_users;
/

set serveroutput on;

EXEC pkg_users.insert_user('Nik', 'User', 'nick@example.com', 'password123');


SELECT *FROM USERS
