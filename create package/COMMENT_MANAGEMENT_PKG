-- Package Specification
CREATE OR REPLACE PACKAGE comment_management_pkg AS
  -- Görev eklemek için prosedür
  PROCEDURE insert_comment (
    p_task_id  comments.task_id%TYPE,
    p_user_id  comments.user_id%TYPE,
    p_comment_text comments.comment_text%TYPE,
    p_comment_time comments.comment_time%TYPE
  );

  -- Görev güncellemek için prosedür
  PROCEDURE update_comment (
    p_comment_id comments.comment_id%TYPE,
    p_task_id  comments.task_id%TYPE,
    p_user_id  comments.user_id%TYPE,
    p_comment_text comments.comment_text%TYPE,
    p_comment_time comments.comment_time%TYPE
  );

  -- Görev silmek için prosedür
  PROCEDURE delete_comment (
    p_comment_id comments.comment_id%TYPE
  );


  -- Common subprocedure for raising exceptions and rolling back
  PROCEDURE raise_error(p_error_message VARCHAR2);

END comment_management_pkg;
/

-- Package Body
CREATE OR REPLACE PACKAGE BODY comment_management_pkg AS
  -- Common subprocedure for raising exceptions and rolling back
  PROCEDURE raise_error(p_error_message VARCHAR2) AS
  BEGIN
    ROLLBACK;
    RAISE_APPLICATION_ERROR(-20000, p_error_message);
  END raise_error;

  -- Görev eklemek için prosedür
  PROCEDURE insert_comment (
    p_task_id  comments.task_id%TYPE,
    p_user_id  comments.user_id%TYPE,
    p_comment_text comments.comment_text%TYPE,
    p_comment_time comments.comment_time%TYPE
  ) AS
    v_count NUMBER; 

  BEGIN
    -- Start the transaction
    BEGIN
      INSERT INTO comments (comment_id, task_id, user_id, comment_text, comment_time)
      VALUES (comment_id_seq.NEXTVAL, p_task_id, p_user_id, p_comment_text, p_comment_time);
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        log_error('insert',sqlcode,sqlerrm);
    END;
  END insert_comment;

  -- Görev güncellemek için prosedür
  PROCEDURE update_comment (
    p_comment_id comments.comment_id%TYPE,
    p_task_id  comments.task_id%TYPE,
    p_user_id  comments.user_id%TYPE,
    p_comment_text comments.comment_text%TYPE,
    p_comment_time comments.comment_time%TYPE
  ) AS
    v_count NUMBER; -- DECLARE edilen de?i?ken

  BEGIN
    -- Start the transaction
    BEGIN
      -- Veritaban?nda p_task_id ve p_user_id ile e?le?en bir görev ve kullan?c? var m? kontrol et
      SELECT COUNT(*)
      INTO v_count
      FROM tasks
      WHERE task_id = p_task_id;

      IF v_count = 0 THEN
        raise_error('Geçersiz task_id');
      END IF;

      SELECT COUNT(*)
      INTO v_count
      FROM users
      WHERE user_id = p_user_id;

      IF v_count = 0 THEN
        raise_error('Geçersiz user_id');
      END IF;

      -- Yorumu güncelle
      UPDATE comments
      SET task_id = p_task_id,
          user_id = p_user_id,
          comment_text = p_comment_text,
          comment_time = p_comment_time
      WHERE comment_id = p_comment_id;
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        log_error('update',sqlcode,sqlerrm);
    END;
  END update_comment;

  -- Görev silmek için prosedür
  PROCEDURE delete_comment (
    p_comment_id comments.comment_id%TYPE
  ) AS
  BEGIN
    -- Start the transaction
    BEGIN
      DELETE FROM comments WHERE comment_id = p_comment_id;
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        log_error('delete',sqlcode,sqlerrm);
    END;
  END delete_comment;

  
END comment_management_pkg;
/

exec comment_management_pkg.insert_comment(6, 17, 'Bu bir test yorumudur.', SYSTIMESTAMP);
select *from users;
select*from tasks;
select*from comments;
