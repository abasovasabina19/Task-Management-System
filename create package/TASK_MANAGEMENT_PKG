-- Package Specification
CREATE OR REPLACE PACKAGE task_management_pkg AS
  -- Görev eklemek için prosedür
  PROCEDURE insert_task (
    p_name tasks.name%TYPE,
    p_description tasks.description%TYPE,
    p_project_id tasks.project_id%TYPE,
    p_assigned_to_username users.username%TYPE,
    p_status tasks.status%TYPE DEFAULT 'To-Do',
    p_deadline tasks.deadline%TYPE,
    p_reminder tasks.reminder%TYPE
  );

  -- Görev güncellemek için prosedür
  PROCEDURE update_task (
    p_task_id tasks.task_id%TYPE,
    p_name tasks.name%TYPE,
    p_description tasks.description%TYPE,
    p_project_id tasks.project_id%TYPE,
    p_assigned_to_username users.username%TYPE,
    p_status tasks.status%TYPE,
    p_deadline tasks.deadline%TYPE,
    p_reminder tasks.reminder%TYPE
  );

  -- Görev silmek için prosedür
  PROCEDURE delete_task (
    p_task_id tasks.task_id%TYPE
  );

  
END task_management_pkg;
/

-- Package Body
CREATE OR REPLACE PACKAGE BODY task_management_pkg AS
  
  -- Görev eklemek için prosedür
  PROCEDURE insert_task (
    p_name tasks.name%TYPE,
    p_description tasks.description%TYPE,
    p_project_id tasks.project_id%TYPE,
    p_assigned_to_username users.username%TYPE,
    p_status tasks.status%TYPE DEFAULT 'To-Do',
    p_deadline tasks.deadline%TYPE,
    p_reminder tasks.reminder%TYPE
  ) AS
    v_assigned_to_id users.user_id%TYPE;
  BEGIN
    -- Verilen kullan?c? ad?na göre kullan?c? kimli?ini bul
    SELECT user_id INTO v_assigned_to_id FROM users WHERE username = p_assigned_to_username;

    -- Start the transaction
    BEGIN
      INSERT INTO tasks (task_id, name, description, project_id, assigned_to, status, deadline, reminder)
      VALUES (task_id_seq.NEXTVAL, p_name, p_description, p_project_id, v_assigned_to_id, p_status, p_deadline, p_reminder);
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        log_error('insert',sqlcode,sqlerrm);
    END;
  END insert_task;

  -- Görev güncellemek için prosedür
  PROCEDURE update_task (
    p_task_id tasks.task_id%TYPE,
    p_name tasks.name%TYPE,
    p_description tasks.description%TYPE,
    p_project_id tasks.project_id%TYPE,
    p_assigned_to_username users.username%TYPE,
    p_status tasks.status%TYPE,
    p_deadline tasks.deadline%TYPE,
    p_reminder tasks.reminder%TYPE
  ) AS
    v_assigned_to_id users.user_id%TYPE;
  BEGIN
    -- Verilen kullan?c? ad?na göre kullan?c? kimli?ini bul
    SELECT user_id INTO v_assigned_to_id FROM users WHERE username = p_assigned_to_username;

    -- Start the transaction
    BEGIN
      UPDATE tasks
      SET name = p_name,
          description = p_description,
          project_id = p_project_id,
          assigned_to = v_assigned_to_id,
          status = p_status,
          deadline = p_deadline,
          reminder = p_reminder
      WHERE task_id = p_task_id;
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
      log_error('update',sqlcode,sqlerrm);
    END;
  END update_task;

  -- Görev silmek için prosedür
  PROCEDURE delete_task (
    p_task_id tasks.task_id%TYPE
  ) AS
  BEGIN
    -- Start the transaction
    BEGIN
      DELETE FROM tasks WHERE task_id = p_task_id;
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        log_error('delete',sqlcode,sqlerrm);
    END;
  END delete_task;


END task_management_pkg;
/


BEGIN
  task_management_pkg.insert_task(
    'Örnek Görev',                 -- Görev adı
    'Örnek Açıklama',             -- Görev açıklaması
     NULL,                             -- Proje kimliği
    'Leman',                -- Atanan kullanıcı adı
    'To-Do',                       -- Görev durumu (varsayılan olarak 'To-Do')
    TO_TIMESTAMP('2023-12-31 23:59:59', 'YYYY-MM-DD HH24:MI:SS'), -- Bitiş tarihi
    TO_TIMESTAMP('2023-12-30 12:00:00', 'YYYY-MM-DD HH24:MI:SS')  -- Hatırlatma tarihi
  );
END;
/

select *from  tasks;
